var search_data = {"index":{"searchIndex":["tilebag","testdrawtile","testpointsfor","tilegroup","testappend","testhand","testinitialize","testremove","tilerack","testhastilesfor","testnumberoftilesneeded","testremoveword","word","testinitialize","testscore","append()","draw_tile()","empty?()","hand()","has_tiles_for?()","new()","new()","number_of_tiles_needed()","points_for()","remove()","remove_word()","score()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","test_append_duplicate_tiles()","test_append_many_tiles()","test_append_one_tile()","test_can_remove_a_word_whose_letters_are_in_order_on_the_rack()","test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack()","test_can_remove_word_with_duplicate_letters()","test_can_remove_word_without_removing_unneeded_duplicate_letters()","test_confirm_point_values()","test_convert_empty_group_to_string()","test_convert_multi_tile_group_to_string()","test_convert_multi_tile_group_with_duplicates_to_string()","test_convert_single_tile_group_to_string()","test_create_empty_tile_group()","test_create_empty_word()","test_empty_tile_rack_should_need_max_tiles()","test_empty_word_should_have_score_of_zero()","test_has_proper_number_of_tiles()","test_has_proper_tile_distribution()","test_make_sure_duplicates_are_not_removed()","test_rack_contains_a_word_with_duplicate_letters()","test_rack_contains_some_but_not_all_needed_letters()","test_rack_doesnt_contain_any_needed_letters()","test_rack_doesnt_contain_enough_duplicate_letters()","test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates()","test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates()","test_remove_first_tile_from_many()","test_remove_last_tile_from_many()","test_remove_middle_tile_from_many()","test_remove_multiple_tiles()","test_remove_only_tile()","test_score_a_one_tile_word()","test_score_a_word_with_multiple_different_tiles()","test_score_a_word_with_recurring_tiles()","test_that_full_tile_rack_doesnt_need_any_tiles()","test_tile_rack_with_one_tile_should_need_max_minus_one_tiles()","test_tile_rack_with_several_tiles_should_need_some_tiles()","gemfile","gemfile.lock","readme","rakefile"],"longSearchIndex":["tilebag","tilebag::testdrawtile","tilebag::testpointsfor","tilegroup","tilegroup::testappend","tilegroup::testhand","tilegroup::testinitialize","tilegroup::testremove","tilerack","tilerack::testhastilesfor","tilerack::testnumberoftilesneeded","tilerack::testremoveword","word","word::testinitialize","word::testscore","tilegroup#append()","tilebag#draw_tile()","tilebag#empty?()","tilegroup#hand()","tilerack#has_tiles_for?()","tilebag::new()","tilegroup::new()","tilerack#number_of_tiles_needed()","tilebag::points_for()","tilegroup#remove()","tilerack#remove_word()","word#score()","tilegroup::testappend#setup()","tilegroup::testhand#setup()","tilegroup::testremove#setup()","tilerack::testhastilesfor#setup()","tilerack::testnumberoftilesneeded#setup()","tilerack::testremoveword#setup()","word::testscore#setup()","tilegroup::testappend#test_append_duplicate_tiles()","tilegroup::testappend#test_append_many_tiles()","tilegroup::testappend#test_append_one_tile()","tilerack::testremoveword#test_can_remove_a_word_whose_letters_are_in_order_on_the_rack()","tilerack::testremoveword#test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack()","tilerack::testremoveword#test_can_remove_word_with_duplicate_letters()","tilerack::testremoveword#test_can_remove_word_without_removing_unneeded_duplicate_letters()","tilebag::testpointsfor#test_confirm_point_values()","tilegroup::testhand#test_convert_empty_group_to_string()","tilegroup::testhand#test_convert_multi_tile_group_to_string()","tilegroup::testhand#test_convert_multi_tile_group_with_duplicates_to_string()","tilegroup::testhand#test_convert_single_tile_group_to_string()","tilegroup::testinitialize#test_create_empty_tile_group()","word::testinitialize#test_create_empty_word()","tilerack::testnumberoftilesneeded#test_empty_tile_rack_should_need_max_tiles()","word::testscore#test_empty_word_should_have_score_of_zero()","tilebag::testdrawtile#test_has_proper_number_of_tiles()","tilebag::testdrawtile#test_has_proper_tile_distribution()","tilegroup::testremove#test_make_sure_duplicates_are_not_removed()","tilerack::testhastilesfor#test_rack_contains_a_word_with_duplicate_letters()","tilerack::testhastilesfor#test_rack_contains_some_but_not_all_needed_letters()","tilerack::testhastilesfor#test_rack_doesnt_contain_any_needed_letters()","tilerack::testhastilesfor#test_rack_doesnt_contain_enough_duplicate_letters()","tilerack::testhastilesfor#test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates()","tilerack::testhastilesfor#test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates()","tilegroup::testremove#test_remove_first_tile_from_many()","tilegroup::testremove#test_remove_last_tile_from_many()","tilegroup::testremove#test_remove_middle_tile_from_many()","tilegroup::testremove#test_remove_multiple_tiles()","tilegroup::testremove#test_remove_only_tile()","word::testscore#test_score_a_one_tile_word()","word::testscore#test_score_a_word_with_multiple_different_tiles()","word::testscore#test_score_a_word_with_recurring_tiles()","tilerack::testnumberoftilesneeded#test_that_full_tile_rack_doesnt_need_any_tiles()","tilerack::testnumberoftilesneeded#test_tile_rack_with_one_tile_should_need_max_minus_one_tiles()","tilerack::testnumberoftilesneeded#test_tile_rack_with_several_tiles_should_need_some_tiles()","","","",""],"info":[["TileBag","","TileBag.html","","<p>This class represents a bag of <em>Scrabble</em> tiles to draw from.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["TileBag::TestDrawTile","","TileBag/TestDrawTile.html","","<p>This class tests the draw_tile function of TileBag.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["TileBag::TestPointsFor","","TileBag/TestPointsFor.html","","<p>This class tests the points_for function of TileBag.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["TileGroup","","TileGroup.html","","<p>This class represents a group of <em>Scrabble</em> tiles drawn from a TileBag.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["TileGroup::TestAppend","","TileGroup/TestAppend.html","","<p>This class tests the append method of TileGroup.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu)\n<p>Version … &mdash; "],["TileGroup::TestHand","","TileGroup/TestHand.html","","<p>This class tests the hand method of TileGroup.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu)\n<p>Version … &mdash; "],["TileGroup::TestInitialize","","TileGroup/TestInitialize.html","","<p>This class tests the constructor of TileGroup.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu)\n<p>Version … &mdash; "],["TileGroup::TestRemove","","TileGroup/TestRemove.html","","<p>This class tests the remove method of TileGroup.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu)\n<p>Version … &mdash; "],["TileRack","","TileRack.html","","<p>This class represents the current set of 7 tiles from which the player can make a word.\n<p>Author &mdash; James  …\n"],["TileRack::TestHasTilesFor","","TileRack/TestHasTilesFor.html","","<p>This class contains unit tests for the TileRack#has_tiles_for? method.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["TileRack::TestNumberOfTilesNeeded","","TileRack/TestNumberOfTilesNeeded.html","","<p>This class contains unit tests for the TileRack#number_of_tiles_needed method.\n<p>Author &mdash; James Luke Johnson …\n"],["TileRack::TestRemoveWord","","TileRack/TestRemoveWord.html","","<p>This class contains unit tests for the TileRack#remove_word method.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["Word","","Word.html","","<p>This class represents a scorable set of tiles drawn in a TileGroup.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu …\n"],["Word::TestInitialize","","Word/TestInitialize.html","","<p>This class tests the Word#initialize method.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu)\n<p>Version … &mdash; "],["Word::TestScore","","Word/TestScore.html","","<p>This class tests the Word#score method.\n<p>Author &mdash; James Luke Johnson (jjohn144@my.westga.edu)\n<p>Version &mdash; 2019.1.15 …\n"],["append","TileGroup","TileGroup.html#method-i-append","(tile)","<p>Appends a new <strong>Tile</strong> to the TileGroup\n"],["draw_tile","TileBag","TileBag.html#method-i-draw_tile","()","<p>Draws a random tile from the TileBag.\n<p>Returns:, Tile &mdash; <em>or</em> \n<p>nil &mdash; if TileBag is empty.\n"],["empty?","TileBag","TileBag.html#method-i-empty-3F","()","<p>Checks if the TileBag is empty.\n<p><code>Returns:</code>, true &mdash; if bag is empty.\n\n"],["hand","TileGroup","TileGroup.html#method-i-hand","()","<p>Returns a string that is the concatenation of all Tiles&#39; string values\n"],["has_tiles_for?","TileRack","TileRack.html#method-i-has_tiles_for-3F","(text)","<p>Returns true if the rack has enough tiles to make the word represented by the text parameter.\n"],["new","TileBag","TileBag.html#method-c-new","()","<p>Creates a new TileBag and fills it with the standard distribution of <em>Scrabble</em> tiles.\n"],["new","TileGroup","TileGroup.html#method-c-new","()","<p>Creates an empty TileGroup\n"],["number_of_tiles_needed","TileRack","TileRack.html#method-i-number_of_tiles_needed","()","<p>Returns the number of tiles needed to refill the TileRack to MAX_TILES\n"],["points_for","TileBag","TileBag.html#method-c-points_for","(tile)","<p>Checks the value of a <strong>Tile</strong>.\n<p><code>Parameters:</code>, tile &mdash; A symbol representing the tile to get points for.\n"],["remove","TileGroup","TileGroup.html#method-i-remove","(tile)","<p>Removes a <strong>Tile</strong> from the TileGroup\n"],["remove_word","TileRack","TileRack.html#method-i-remove_word","(text)","<p>Returns a Word object made by removing the tiles given by text (a string).\n"],["score","Word","Word.html#method-i-score","()","<p>Scores the Word by getting the value of each tile.\n"],["setup","TileGroup::TestAppend","TileGroup/TestAppend.html#method-i-setup","()","<p>Creates a new, empty TileGroup for testing.\n"],["setup","TileGroup::TestHand","TileGroup/TestHand.html#method-i-setup","()","<p>Creates a new, empty TileGroup for testing.\n"],["setup","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-setup","()","<p>Creates a new TileGroup and adds several tiles to it.\n"],["setup","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-setup","()","<p>Sets up the tests by creating a new TileRack.\n"],["setup","TileRack::TestNumberOfTilesNeeded","TileRack/TestNumberOfTilesNeeded.html#method-i-setup","()","<p>Sets up the tests by creating a new TileRack.\n"],["setup","TileRack::TestRemoveWord","TileRack/TestRemoveWord.html#method-i-setup","()","<p>Sets up the tests by creating a new TileRack.\n"],["setup","Word::TestScore","Word/TestScore.html#method-i-setup","()","<p>Sets up the tests by creating a new Word.\n"],["test_append_duplicate_tiles","TileGroup::TestAppend","TileGroup/TestAppend.html#method-i-test_append_duplicate_tiles","()","<p>Tests that TileGroup can append duplicate tiles.\n"],["test_append_many_tiles","TileGroup::TestAppend","TileGroup/TestAppend.html#method-i-test_append_many_tiles","()","<p>Tests that a TileGroup can append many tiles.\n"],["test_append_one_tile","TileGroup::TestAppend","TileGroup/TestAppend.html#method-i-test_append_one_tile","()","<p>Tests that a TileGroup can append one tile.\n"],["test_can_remove_a_word_whose_letters_are_in_order_on_the_rack","TileRack::TestRemoveWord","TileRack/TestRemoveWord.html#method-i-test_can_remove_a_word_whose_letters_are_in_order_on_the_rack","()","<p>Tests that TileRack#remove_word returns a word with the same tiles\n"],["test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack","TileRack::TestRemoveWord","TileRack/TestRemoveWord.html#method-i-test_can_remove_a_word_whose_letters_are_not_in_order_on_the_rack","()","<p>Tests that TileRack#remove_word returns a word when the tiles are out of order\n"],["test_can_remove_word_with_duplicate_letters","TileRack::TestRemoveWord","TileRack/TestRemoveWord.html#method-i-test_can_remove_word_with_duplicate_letters","()","<p>Tests that TileRack#remove_word returns a word with duplicate letters\n"],["test_can_remove_word_without_removing_unneeded_duplicate_letters","TileRack::TestRemoveWord","TileRack/TestRemoveWord.html#method-i-test_can_remove_word_without_removing_unneeded_duplicate_letters","()","<p>Tests that TileRack#remove_word will create a word withouth removing extra duplicate tiles\n"],["test_confirm_point_values","TileBag::TestPointsFor","TileBag/TestPointsFor.html#method-i-test_confirm_point_values","()","<p>Tests every <strong>Tile</strong> in the bag for the <em>Scrabble</em>-default value.\n"],["test_convert_empty_group_to_string","TileGroup::TestHand","TileGroup/TestHand.html#method-i-test_convert_empty_group_to_string","()","<p>Tests that an empty TileGroup will convert to an empty string\n"],["test_convert_multi_tile_group_to_string","TileGroup::TestHand","TileGroup/TestHand.html#method-i-test_convert_multi_tile_group_to_string","()","<p>Tests that a TileGroup with many tiles will convert to a string\n"],["test_convert_multi_tile_group_with_duplicates_to_string","TileGroup::TestHand","TileGroup/TestHand.html#method-i-test_convert_multi_tile_group_with_duplicates_to_string","()","<p>Tests that a TileGroup with duplicate tiles will convert to a string\n"],["test_convert_single_tile_group_to_string","TileGroup::TestHand","TileGroup/TestHand.html#method-i-test_convert_single_tile_group_to_string","()","<p>Tests that a TileGroup with one tile will convert to a string\n"],["test_create_empty_tile_group","TileGroup::TestInitialize","TileGroup/TestInitialize.html#method-i-test_create_empty_tile_group","()","<p>Tests that a new TileGroup has an empty tiles array.\n"],["test_create_empty_word","Word::TestInitialize","Word/TestInitialize.html#method-i-test_create_empty_word","()","<p>Tests that an empty word is created.\n"],["test_empty_tile_rack_should_need_max_tiles","TileRack::TestNumberOfTilesNeeded","TileRack/TestNumberOfTilesNeeded.html#method-i-test_empty_tile_rack_should_need_max_tiles","()","<p>Tests that an empty TileRack needs 7 tiles\n"],["test_empty_word_should_have_score_of_zero","Word::TestScore","Word/TestScore.html#method-i-test_empty_word_should_have_score_of_zero","()","<p>Tests that an empty word has a score of zero\n"],["test_has_proper_number_of_tiles","TileBag::TestDrawTile","TileBag/TestDrawTile.html#method-i-test_has_proper_number_of_tiles","()","<p>Tests that the TileBag has exactly 98 tiles at initialization.\n"],["test_has_proper_tile_distribution","TileBag::TestDrawTile","TileBag/TestDrawTile.html#method-i-test_has_proper_tile_distribution","()","<p>Tests that the TileBag has the correct <em>Scrabble</em> distribution of letters.\n"],["test_make_sure_duplicates_are_not_removed","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-test_make_sure_duplicates_are_not_removed","()","<p>Tests that TileGroup does not remove duplicate tiles.\n"],["test_rack_contains_a_word_with_duplicate_letters","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-test_rack_contains_a_word_with_duplicate_letters","()","<p>Tests that a TileRack has_tiles_for a word with duplicate letters\n"],["test_rack_contains_some_but_not_all_needed_letters","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-test_rack_contains_some_but_not_all_needed_letters","()","<p>Tests that a TileRack#has_tiles_for returns false when it contains only some of the needed tiles.\n"],["test_rack_doesnt_contain_any_needed_letters","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-test_rack_doesnt_contain_any_needed_letters","()","<p>Tests that a TileRack#has_tiles_for returns false when it contains none of the needed tiles.\n"],["test_rack_doesnt_contain_enough_duplicate_letters","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-test_rack_doesnt_contain_enough_duplicate_letters","()","<p>Tests that TileRack#has_tiles_for returns false when it doesn&#39;t contain enough duplicate tiles.\n"],["test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-test_rack_has_needed_letters_when_letters_are_in_order_no_duplicates","()","<p>Tests that the TileRack has_tiles_for a word when the tiles are in order without duplicates\n"],["test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates","TileRack::TestHasTilesFor","TileRack/TestHasTilesFor.html#method-i-test_rack_has_needed_letters_when_letters_are_not_in_order_no_duplicates","()","<p>Tests that a TileRack has_tiles_for a word when the tiles are not in order, without duplicates\n"],["test_remove_first_tile_from_many","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-test_remove_first_tile_from_many","()","<p>Tests that a TileGroup can remove the first of many tiles.\n"],["test_remove_last_tile_from_many","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-test_remove_last_tile_from_many","()","<p>Tests that TileGroup can remove the last of many tiles.\n"],["test_remove_middle_tile_from_many","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-test_remove_middle_tile_from_many","()","<p>Tests that TileGroup can remove a middle of many tiles.\n"],["test_remove_multiple_tiles","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-test_remove_multiple_tiles","()","<p>Tests that TileGroup can remove many tiles.\n"],["test_remove_only_tile","TileGroup::TestRemove","TileGroup/TestRemove.html#method-i-test_remove_only_tile","()","<p>Tests that a TileGroup can its only tile.\n"],["test_score_a_one_tile_word","Word::TestScore","Word/TestScore.html#method-i-test_score_a_one_tile_word","()","<p>Tests that the word &#39;A&#39; has a score of 1. Testing a single tile.\n"],["test_score_a_word_with_multiple_different_tiles","Word::TestScore","Word/TestScore.html#method-i-test_score_a_word_with_multiple_different_tiles","()","<p>Tests that the word &#39;MULTIPLE&#39; has a score of 12. Testing multiple tiles.\n"],["test_score_a_word_with_recurring_tiles","Word::TestScore","Word/TestScore.html#method-i-test_score_a_word_with_recurring_tiles","()","<p>Tests that the word &#39;COMMITTEE&#39; has a score of 15. Testing recurring tiles.\n"],["test_that_full_tile_rack_doesnt_need_any_tiles","TileRack::TestNumberOfTilesNeeded","TileRack/TestNumberOfTilesNeeded.html#method-i-test_that_full_tile_rack_doesnt_need_any_tiles","()","<p>Tests that a full TileRack (with 7 tiles) needs 0 tiles\n"],["test_tile_rack_with_one_tile_should_need_max_minus_one_tiles","TileRack::TestNumberOfTilesNeeded","TileRack/TestNumberOfTilesNeeded.html#method-i-test_tile_rack_with_one_tile_should_need_max_minus_one_tiles","()","<p>Tests that a TileRack with one tile needs 6 tiles\n"],["test_tile_rack_with_several_tiles_should_need_some_tiles","TileRack::TestNumberOfTilesNeeded","TileRack/TestNumberOfTilesNeeded.html#method-i-test_tile_rack_with_several_tiles_should_need_some_tiles","()","<p>Tests that a TileRack with 4 tiles needs 3 tiles\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org” gem &#39;spellchecker&#39; gem &#39;minitest&#39;\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  minitest (5.11.3)\n  spellchecker (0.1.5)</pre>\n<p>PLATFORMS\n"],["README","","README_md.html","","<p>Ruby Babble\n<p>A single-player Scrabble-type game written in Ruby.\n<p>Author\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">pattern</span> = <span class=\"ruby-string\">&quot;tests/*/test_*.rb&quot;</span>\n</pre>\n"]]}}